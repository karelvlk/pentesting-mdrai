#!/bin/bash

# source /home/kali/Pentesting/scripts/config/config.sh
source ../config/config.sh

echo "Start [$(date "+%Y-%m-%d %H:%M:%S")]: Running normal-simulation"
t0=$(date +%s)

check_required_commands() {
    local missing_counter=0
    local commands=(curl wget swaks dig)
    
    for cmd in "${commands[@]}"; do
        if ! command -v "$cmd" &> /dev/null; then
            echo "Error: Required command '$cmd' not found." >&2
            missing_counter=$((missing_counter + 1))
        fi
    done

    # Check if any commands are missing
    if [ "$missing_counter" -ne 0 ]; then
        echo "Please install the missing commands before running this script." >&2
        exit 1
    fi
}
export -f check_required_commands

# ! REQUIRED COMMANDS: curl, wget, swaks, dig, etc. ! #
check_required_commands

# Function to generate random sleep time between requests
random_sleep() {
    min_sleep=3  # Minimum sleep time in seconds
    max_sleep=8  # Maximum sleep time in seconds
    sleep_duration=$((RANDOM % (max_sleep - min_sleep + 1) + min_sleep))
    sleep $sleep_duration
}
export -f random_sleep

# Function to choose a random user-agent
get_random_user_agent() {
    # User-Agent strings to mimic different browsers
    USER_AGENTS=(
        "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.3"
        "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.1.3 Safari/605.1.15"
        "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:52.0) Gecko/20100101 Firefox/52.0"
    )

    echo "${USER_AGENTS[$RANDOM % ${#USER_AGENTS[@]}]}"
}
export -f get_random_user_agent

# Function to simulate sending an email using SMTP
simulate_smtp_email() {
    # FTP and SMTP example resources
    SMTP_SERVER="smtp.example.com"
    SMTP_PORT=25
    SMTP_USER="user@example.com"
    SMTP_PASSWORD="password"

    echo "Simulating sending an email via SMTP."
    recipient="user@example.com"
    subject="Test Email from Script"
    body="This is a test email sent by our shell script."
    from="fromuser@example.com"
    
    # Using swaks to send an email
    swaks --to "$recipient" --from "$from" --header "Subject: $subject" --body "$body" \
          --server "$SMTP_SERVER" --port "$SMTP_PORT" \
          --auth LOGIN --auth-user "$SMTP_USER" --auth-password "$SMTP_PASSWORD" -tls
    echo "Email sent to $recipient"
}
export -f simulate_smtp_email

# Function to simulate downloading a file via FTP
simulate_ftp_download() {
    FTP_URL="ftp://speedtest.tele2.net/1MB.zip"
    echo "Simulating FTP download of a file."
    wget -q "$FTP_URL" -O /dev/null
    echo "Downloaded a file from $FTP_URL"
}
export -f simulate_ftp_download

# Function to simulate API interaction
simulate_api_call() {
    echo "Simulating API call to a random endpoint."
    # List of APIs to interact with
    APIS=(
        "https://api.github.com/users/octocat"
        "http://httpbin.org/ip"
        "https://jsonplaceholder.typicode.com/todos/1"
        "http://httpbin.org/anything"
    )
    api_url=${APIS[$RANDOM % ${#APIS[@]}]}
    response=$(curl -s -A "$(get_random_user_agent)" "$api_url")
    echo "API Response from $api_url: $response"
}
export -f simulate_api_call

# Function to simulate DNS lookup
simulate_dns_lookup() {
    echo "Simulating DNS lookup for a domain."
    domain="example.com"
    dns_result=$(dig +short "$domain")
    echo "DNS result for $domain: $dns_result"
}
export -f simulate_dns_lookup

# Function to simulate video streaming
simulate_video_streaming() {
    # Video URLs for streaming simulation
    VIDEO_URLS=(
        "http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/BigBuckBunny.mp4"
        "http://commondatastorage.googleapis.com/gtv-videos-bucket/sample/ElephantsDream.mp4"
    )
    echo "Simulating video streaming."
    video_url=${VIDEO_URLS[$RANDOM % ${#VIDEO_URLS[@]}]}
    echo "Streaming video from $video_url"
    curl -s -r 0-1000000 -A "$(get_random_user_agent)" "$video_url" -o /dev/null
}
export -f simulate_video_streaming

# Function to simulate social media interaction
simulate_social_media() {
    echo "Simulating social media interaction."
    api_endpoint="https://jsonplaceholder.typicode.com/posts"
    post_data="{\"title\": \"foo\", \"body\": \"bar\", \"userId\": 1}"
    response=$(curl -s -X POST "$api_endpoint" -d "$post_data" -H "Content-Type: application/json")
    echo "Posted to social media API, response: $response"
} 
export -f simulate_social_media

# Function to simulate file read/write operations
simulate_file_operations() {
    echo "Simulating file read/write operations."
    temp_file="/tmp/simulate_rw.txt"
    echo "Simulating file write."
    echo "This is a test file containing sample data for network synchronization." > "$temp_file"
    echo "Simulating file read."
    cat "$temp_file" > /dev/null
} 
export -f simulate_file_operations

# Function to simulate VoIP Call (Dummy simulation)
simulate_voip_call() {
    echo "Simulating a VoIP call to a random endpoint"
    server_ip="192.168.1.$((RANDOM % 255))"
    echo "Starting VoIP call to $server_ip"
}
export -f simulate_voip_call

# Login to DVWA (it's a legit app)
simulate_login() {
    echo "Simulating login to DVWA."
    TOKEN=$(curl -c /home/kali/Pentesting/utils/dvwa.session -s "http://$target_ip_msf/dvwa/login.php" | grep 'user_token' | awk -F 'value=' '{print $2}' | cut -d"'" -f2)
    if [ -z "$TOKEN" ]; then
        echo "Failed to retrieve user token"
    fi

    PHPSESSID=$(grep PHPSESSID /home/kali/Pentesting/utils/dvwa.session | awk -F' ' '{print $7}')
    if [ -z "$PHPSESSID" ]; then
        echo "Failed to retrieve PHPSESSID"
    fi

    response=$(curl -L -b "PHPSESSID=${PHPSESSID};security=low" -d "username=admin&password=password&Login=Login&user_token=${TOKEN}" -s -w "%{http_code}" -o /dev/null "http://$target_ip_msf/dvwa/login.php")
    if [ "$response" -ne 200 ]; then
        echo "Failed to log in"
    fi

    curl -s -b "PHPSESSID=${PHPSESSID};security=low" -d "ip=$router_ip&submit=submit" "http://$target_ip_msf/dvwa/vulnerabilities/exec/index.php"
    curl -s -b "PHPSESSID=${PHPSESSID};security=low" "http://$target_ip_msf/dvwa/vulnerabilities/sqli/index.php?id=1&Submit=Submit"
    curl -s -b "PHPSESSID=${PHPSESSID};security=low" -d 'txtName=Pepa&mtxMessage=Hello everyone!</script>&btnSign=Sign+Guestbook' "http://$target_ip_msf/dvwa/vulnerabilities/xss_s/"
}
export -f simulate_login

simulate() {
    # List of URL addresses to visit
    URLS=(
        "https://www.seznam.cz"
        "https://www.youtube.com"
        "https://www.novinky.cz"
        "https://www.idnes.cz"
        "https://www.stream.cz"
        "https://www.bbc.com"
        "https://www.reddit.com"
        "https://www.cnn.com"
        "https://www.super.cz"
        "https://www.twitch.tv"
        "https://www.wikipedia.org"
        "https://www.yahoo.com"
        "https://www.news.google.com"
        "https://www.amazon.com"
        "https://www.ebay.com"
        "https://www.aliexpress.com"
    )
    DEPTH=10

    # Main simulation loop
    while true; do
        ### Random action selection
        action=$((RANDOM % 10))
        case $action in
            0)  # Web Browsing
                for i in $(seq 0 $DEPTH); do
                    random_index=$((RANDOM % ${#URLS[@]}))
                    url=${URLS[$random_index]}
                    user_agent=$(get_random_user_agent)
                    
                    echo "Visiting: $url, Depth: $i"
                    html_content=$(curl -sS -A "$user_agent" --compressed "$url")
                    links=($(echo "$html_content" | grep -o 'href="https://[^" ;]*"' | cut -d '"' -f 2))
                    
                    if [[ ${#links[@]} -eq 0 ]]; then
                        echo "No more links."
                        break
                    fi
                    
                    follow_links=$((RANDOM % 2))
                    if [ "$follow_links" -eq 1 ]; then
                        URLS=("${links[@]}")
                    fi
                    
                    random_sleep
                done
                ;;
            1)  # SMTP Email Sending
                simulate_smtp_email
                random_sleep
                ;;
            2)  # FTP Download
                simulate_ftp_download
                random_sleep
                ;;
            3)  # API Interaction
                simulate_api_call
                random_sleep
                ;;
            4)  # DNS Lookup
                simulate_dns_lookup
                random_sleep
                ;;
            5)  # Video Streaming
                simulate_video_streaming
                random_sleep
                ;;
            6)  # Social Media Interaction
                simulate_social_media
                random_sleep
                ;;
            7)  # File Read/Write Operations
                simulate_file_operations
                random_sleep
                ;;
            8)  # VoIP Call Simulation
                simulate_voip_call
                random_sleep
                ;;
            9)  # Login to DVWA
                simulate_login
                random_sleep
                ;;
        esac
    done
}

export -f simulate

timeout 1m bash -c 'simulate'
t=$(date +%s)
elapsed_time=$((t - t0))
echo "End [$(date "+%Y-%m-%d %H:%M:%S")]: Running normal-simulation (took $elapsed_time seconds)"
